            ---------------------------
             Guide for Tool Developers
            ---------------------------
                    -----------
                     31 May 13
                    -----------
                    
What is here?

  BPMN MIWG Tools are organised as one 'module' per tool and a parent project 
  that provides the web site to present results. Maven is used to manage each 
  module and provide build configuration. Jenkins is used to build the tools, 
  run tests and to generate and deploy the site. 
  
  At this time we have the following modules: 
  
  * Tools - The 'parent' module in Maven parlance and which also contains the web site functionality (JavaScript etc). 
  
  * XML Compare - Utilises XML diff to compare vendor models to reference ones.
  
  * XPath Test - Asserts that expected content from the reference model exists in each vendor model.

What pre-requisites must I install? 

  Tools are (currently) authored in Java so you will need a JDK and your 
  favourite Java editor or IDE. Apart from that you are encouraged to install 
  Maven which is used to ensure repeatable builds on everyone's workstations.
  If you are unfamiliar with Maven please read 
  {{{http://maven.apache.org/run-maven/index.html}Running Maven}}.

  <Note: I have encountered some failures to generate the site when using Maven 3.0.3 as built-in in my version of Mac OS X, 3.0.4 works fine under Linux and 3.0.5 (the latest as of writing) works on Mac.>
  
How do I...

* Update a tool? 
    
  The tools each have their own sub-folder in GitHub. Simply push changes as 
  usual and Jenkins will pick them up, compile them, run the tests using the
  new tool and deploy a new version of the site. 
  
  Jenkins is currently configured to poll GitHub periodically and the build is 
  a little slow so you will probably want to check your changes in a local
  environment.   
  
* Generate the site?
  
  Jenkins does this, but if you want to generate it locally the following 
  Maven goals can be run from the tools directory. 
    
  * <<<site>>> generates each tools' site and the parent site ;
  
  * <<<site:stage>>> merges all 3 into a staging area ; and 
  
  * <<<post-site>>> uses a custom Ant script to turn the staging area into something 
  that may be hosted in a JEE webapp container.
  
  site may also be run on a single module and the output reviewed in the 
  target/site folder. For more information see the documentation for the Maven 
  site plugin {{{http://maven.apache.org/plugins/maven-site-plugin/} here}}.
  
* Check the site looks as I expected? 
  
  Open the following file in a browser: 
    
------------------------------------
  tools/target/staging/index.html
------------------------------------
    
  There is currently no dynamic content so no need to start a webapp container
  but if you would like to (or have added dynamic Java / JSP content) then you 
  may start a jetty server with: 
    
------------------
  mvn jetty:run
------------------ 
    
  and view the result at: 
     
---------------------------------
  http://localhost:7070/tools/   
---------------------------------

* Deploy a new version of the site? 
  
  Jenkins will do this for each successful build it runs. The site is hosted by 
  Cloudbees and may also be managed manually using the Cloudbees command line or 
  web tools. 
  
* Inspect the Jenkins configuration or check on build status?

  
  
  
